AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: A bare bones example of deploying an API Gateway API with one Lambda using an OpenAPI 3.0.1 example spec file as in-line yaml.

Parameters:

  Name:
    Type: String
    Description: The name of the API to create, also used as the stack name.

Resources:

  CommonDependenciesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${AWS::StackName}-common-dependencies
      Description: Common dependencies for Lambda functions
      ContentUri: layers/common-deps/
      CompatibleRuntimes:
        - python3.8
        - python3.9
        - python3.10
      RetentionPolicy: Retain

  Api:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Ref Name
      StageName: live
      OpenApiVersion: 3.0.1
      DefinitionBody: 
        openapi: 3.0.1
        info:
          title: Hello World API
          description: This is a swagger example.
          contact:
            email: you@your-company.com
          license:
            name: Apache 2.0
            url: http://www.apache.org/licenses/LICENSE-2.0.html
          version: 1.0.0
        paths:
          /hello/world:
            get:
              summary: get hello world
              description: |
                Invokes hello world lambda function example.
              responses:
                "200":
                  description: search results matching criteria
                "400":
                  description: bad input parameter
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddLambdaFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy
          /matrix:
            post:
              summary: matrix operations
              description: |
                Performs memory-optimized matrix operations (multiply, transpose, determinant).
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        operation:
                          type: string
                          enum: [multiply, transpose, determinant]
                          description: Matrix operation to perform
                        size:
                          type: integer
                          minimum: 1
                          maximum: 500
                          description: Matrix size (NxN)
              responses:
                "200":
                  description: Matrix operation completed successfully
                "400":
                  description: Invalid parameters
                "507":
                  description: Insufficient memory
                "500":
                  description: Internal server error
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MatrixLambdaFunction.Arn}/invocations
                responses:
                  default:
                    statusCode: "200"
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                type: aws_proxy

  AddLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: add.lambda_handler
      Runtime: python3.8
      CodeUri: ./lambdas/add
      Description: Add
      AutoPublishAlias: live

  CleanInputLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: cleaninput.lambda_handler
      Runtime: python3.8
      CodeUri: ./lambdas/cleaninput
      Description: Clean Input
      AutoPublishAlias: live

  DivideLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: divide.lambda_handler
      Runtime: python3.8
      CodeUri: ./lambdas/divide
      Description: Divide
      AutoPublishAlias: live

  MultiplyLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: multiply.lambda_handler
      Runtime: python3.8
      CodeUri: ./lambdas/multiply
      Description: Multiply
      AutoPublishAlias: live

  SubtractLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: subtract.lambda_handler
      Runtime: python3.8
      CodeUri: ./lambdas/subtract
      Description: Subtract
      AutoPublishAlias: live

  MatrixLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: matrix.lambda_handler
      Runtime: python3.8
      CodeUri: ./lambdas/matrix
      Description: Memory-Optimized Matrix Operations
      MemorySize: 512
      Timeout: 30
      AutoPublishAlias: live
      Environment:
        Variables:
          PYTHONHASHSEED: 0
      Events:
        MatrixApi:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /matrix
            Method: post

  StateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Name: !Sub statemachine-${AWS::StackName}
      DefinitionUri: sm_def.yaml
      DefinitionSubstitutions: 
        AddLambdaFunction: !Ref AddLambdaFunction
        CleanInputLambdaFunction: !Ref CleanInputLambdaFunction
        DivideLambdaFunction: !Ref DivideLambdaFunction
        MultiplyLambdaFunction: !Ref MultiplyLambdaFunction
        SubtractLambdaFunction: !Ref SubtractLambdaFunction
      Role: !GetAtt StateMachineRole.Arn

  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub statemachine-role-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  InvokeFunctionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub statemachine-invoke-function-policy-${AWS::StackName}
      Roles:
        - !Ref StateMachineRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: '*'

  # CloudWatch Alarms for Monitoring
  ApiGatewayErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-api-error-rate
      AlarmDescription: API Gateway 4XX error rate alarm
      MetricName: 4XXError
      Namespace: AWS/ApiGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Ref Name

  ApiGatewayLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-api-latency
      AlarmDescription: API Gateway latency alarm
      MetricName: Latency
      Namespace: AWS/ApiGateway
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5000
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Ref Name

  LambdaErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-lambda-errors
      AlarmDescription: Lambda function error rate alarm
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref AddLambdaFunction

  LambdaDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-lambda-duration
      AlarmDescription: Lambda function duration alarm
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10000
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref AddLambdaFunction
